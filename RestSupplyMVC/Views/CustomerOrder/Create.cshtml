@model RestSupplyMVC.ViewModels.CreateCustomerOrderViewModel

@{
    ViewBag.Title = "Create Customer Order";
}

<head>
    <script src="//code.jquery.com/jquery-1.11.1.min.js"></script>
    <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.0/js/bootstrap.min.js"></script>

    <link href="//netdna.bootstrapcdn.com/bootstrap/3.1.0/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">

</head>


<h2>New Customer Order</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>@Model.KitchenName</h4>
        <hr />
    </div>
    <div class="form-group">
        <table id="orderTable">
            @Html.HiddenFor(model => model.KitchenId, new { id="kitchenId"})
            <tbody>
            @for (var i = 0; i < Model.AllMenuItemsToQuantityMap.Keys.Count; i++)
            {

                <tr>
                    <td>
                        <div class="form-group">
                            @Html.LabelFor(model => model.AllMenuItemsToQuantityMap.ElementAt(i).Key.Id, Model.AllMenuItemsToQuantityMap.ElementAt(i).Key.Name, htmlAttributes: new {@class = "control-label col-md-2", style = "width: 200px;", id = "MenuItemId"})
                        </div>
                    </td>
                    <td>
                        <div class="input-group">
                            <span class="input-group-btn">
                                <button type="button" class="btn btn-danger btn-number" data-type="minus" data-field="quant[@i]">
                                    <span class="glyphicon glyphicon-minus"></span>
                                </button>
                            </span>
                            <input type="text" id="quant[@i]" name="quant[@i]" class="form-control input-number" value="0" min="0" max="100">
                            <span class="input-group-btn">
                                <button type="button" class="btn btn-success btn-number" data-type="plus" data-field="quant[@i]">
                                    <span class="glyphicon glyphicon-plus"></span>
                                </button>
                            </span>
                        </div>
                    </td>
                </tr>
            }
            </tbody>
        </table>

        <div class="col-md-offset-2 col-md-10" align="left">
            <hr />
            <input type="submit" value="Create" class="btn btn-default" disabled="disabled" id="createBtn"/>
        </div>
    </div>



}
<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {


    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $('.btn-number').click(function(e) {
            e.preventDefault();

            fieldName = $(this).attr('data-field');
            type = $(this).attr('data-type');
            var input = $("input[name='" + fieldName + "']");
            var currentVal = parseInt(input.val());
            if (!isNaN(currentVal)) {

                // Remove item from order
                if (type == 'minus') {

                    if (currentVal > input.attr('min')) {
                        input.val(currentVal - 1).change();
                    }
                    if (parseInt(input.val()) == input.attr('min')) {
                        $(this).attr('disabled', true);
                    }

                // Add item to order
                } else if (type == 'plus') {
                    if (currentVal < input.attr('max')) {
                        input.val(currentVal + 1).change();
                    }

                    // Ajax call that checks the restaurant has ingredients for all selected menuItems
                    function isMenuOrderInStock(data) {
                        return $.ajax({
                            contentType: 'application/json; charset=utf-8',
                            dataType: 'json',
                            type: 'POST',
                            url: "/CustomerOrder/IsMenuOrderInStock",
                            data: data,
                            success: function (result) {
                                alert(result);
                            },
                            error: function () {
                                alert("Error!");
                            }
                        });
                    }

                    // Send all menuItems with their current quantity in order to check if ingredients are in stock
                    var customers = [];
                    customers.length = 0;
                            var menuItems = @Html.Raw(Json.Encode(Model.AllMenuItemsToQuantityMap.Keys));
                    $.each(menuItems,
                        function(index, item) {
                            var selector = "" + index;
                            selector = "quant[" + selector + "]";
                            customers.push({
                                id: item.Id, // menuItemId
                                quantity: parseInt($('[id="quant[' + index + ']"]').val(), 10)
                                

                            });
                        });
                    var data = JSON.stringify({
                        orderVm: customers,
                        kitchenId: $("#kitchenId").val()
                    });

                    $.when(isMenuOrderInStock(data)).then(function(response) {
                        console.log(response);
                    }).fail(function(err) {
                        console.log(err);
                    });


                    // TODO refactor this - there should not be a max value
                    if (parseInt(input.val()) == input.attr('max')) {
                        $(this).attr('disabled', true);
                    }

                }
            } else {
                input.val(0);
            }
        });
$('.input-number').focusin(function(){
   $(this).data('oldValue', $(this).val());
});
$('.input-number').change(function() {

    minValue =  parseInt($(this).attr('min'));
    maxValue =  parseInt($(this).attr('max'));
    valueCurrent = parseInt($(this).val());

    name = $(this).attr('name');
    if(valueCurrent >= minValue) {
        $(".btn-number[data-type='minus'][data-field='"+name+"']").removeAttr('disabled')
    } else {
        alert('Sorry, the minimum value was reached');
        $(this).val($(this).data('oldValue'));
    }
    if(valueCurrent <= maxValue) {
        $(".btn-number[data-type='plus'][data-field='"+name+"']").removeAttr('disabled')
    } else {
        alert('Sorry, the maximum value was reached');
        $(this).val($(this).data('oldValue'));
    }


});
$(".input-number").keydown(function (e) {
        // Allow: backspace, delete, tab, escape, enter and .
        if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 190]) !== -1 ||
             // Allow: Ctrl+A
            (e.keyCode == 65 && e.ctrlKey === true) ||
             // Allow: home, end, left, right
            (e.keyCode >= 35 && e.keyCode <= 39)) {
                 // let it happen, don't do anything
                 return;
        }
        // Ensure that it is a number and stop the keypress
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
});
    </script>

}
